const login = require("fca-unofficial");
const fs = require("fs");

const appState = require("./appstate.json");
const allowedSender = "100004660908109"; // рд╕рд┐рд░реНрдлрд╝ рдЗрд╕ UID рд╕реЗ рдХрдорд╛рдВрдб рдорд╛рдиреЗрдЧрд╛

login({ appState }, (err, api) => {
  if (err) return console.error("тЭМ рд▓реЙрдЧрд┐рди рдлреЗрд▓:", err);

  api.setOptions({
    listenEvents: true,
    selfListen: false,
    logLevel: "silent"
  });

  console.log("тЬЕ рдмреЛрдЯ рдЪрд╛рд▓реВ рд╣реЛ рдЧрдпрд╛!");

  // рд╕рднреА рдЧреНрд░реБрдкреНрд╕ рдореЗрдВ рдмреЛрдЯ рдСрди рдореИрд╕реЗрдЬ рднреЗрдЬреЗ
  api.getThreadList(10, null, ["INBOX"], (err, threads) => {
    if (err) return console.error("Thread fetch error:", err);
    threads.forEach(thread => {
      if (thread.isGroup) {
        api.sendMessage("ЁЯЪй Avii Raj active hogya", thread.threadID);
      }
    });
  });

  // рдореИрд╕реЗрдЬ рд╕реБрдирдирд╛
  api.listenMqtt((err, message) => {
    if (err || !message.body || message.senderID !== allowedSender) return;

    const command = message.body.toLowerCase();

    if (command === "/start") {
      api.sendMessage("тЬЕ рдмреЛрдЯ рдЪрд╛рд▓реВ рд╣реИ", message.threadID);
    } else if (command === "/np2") {
      api.sendMessage("ЁЯО╡ NP2 рдкреНрд▓реЗ рд╣реЛ рд░рд╣рд╛ рд╣реИ", message.threadID);
    } else if (command === "/mkl") {
      api.sendMessage("ЁЯЫа MKL рдХрдорд╛рдВрдб рдЪрд▓ рдЧрдИ", message.threadID);
    }
  });
});
