const login = require("fca-unofficial");
const fs = require("fs");

const appState = require("./appstate.json");
const allowedSender = "100004660908109"; // рд╕рд┐рд░реНрдлрд╝ рдЗрд╕ UID рд╕реЗ рдХрдорд╛рдВрдб рдорд╛рдиреЗрдЧрд╛

login({ appState }, (err, api) => {
  if (err) {
    console.error("тЭМ рд▓реЙрдЧрд┐рди рдлреЗрд▓:", err);
    return;
  }

  api.setOptions({
    listenEvents: true,
    selfListen: false,
    logLevel: "silent"
  });

  console.log("тЬЕ рдмреЛрдЯ рдЪрд╛рд▓реВ рд╣реЛ рдЧрдпрд╛!");

  // рд╕рднреА рдЧреНрд░реБрдкреНрд╕ рдореЗрдВ рдмреЛрдЯ рдСрди рдореИрд╕реЗрдЬ рднреЗрдЬреЗ
  try {
    api.getThreadList(20, null, ["INBOX"], (err, threads) => {
      if (err || !threads) {
        console.error("тЭМ Thread fetch error:", err || "No threads returned");
        return;
      }

      threads.forEach(thread => {
        if (thread.isGroup) {
          api.sendMessage("ЁЯЪй Avii Raj active hogya", thread.threadID);
        }
      });
    });
  } catch (e) {
    console.error("ЁЯФе Exception in getThreadList:", e);
  }

  // рдореИрд╕реЗрдЬ рд╕реБрдирдирд╛
  api.listenMqtt((err, message) => {
    if (err || !message || !message.body) return;

    // рд╕рд┐рд░реНрдл allowedSender UID рд╕реЗ рд░рд┐рд╕реНрдкреЙрдиреНрдб рдХрд░реЗрдЧрд╛
    if (message.senderID !== allowedSender) return;

    const command = message.body.toLowerCase();

    switch (command) {
      case "/start":
        api.sendMessage("тЬЕ рдмреЛрдЯ рдЪрд╛рд▓реВ рд╣реИ", message.threadID);
        break;
      case "/np2":
        api.sendMessage("ЁЯО╡ NP2 рдкреНрд▓реЗ рд╣реЛ рд░рд╣рд╛ рд╣реИ", message.threadID);
        break;
      case "/mkl":
        api.sendMessage("ЁЯЫа MKL рдХрдорд╛рдВрдб рдЪрд▓ рдЧрдИ", message.threadID);
        break;
      default:
        break;
    }
  });
});
